imports {
    from flask import Flask, request, session, redirect, url_for, render_template_string # Use render_template_string for simplicity
    import os 
}

# --- Descriptions ---
desc secret_key "A secure secret key for session management (use os.urandom)"
desc login_route "/login"
desc logout_route "/logout"
desc protected_route "/protected"
desc home_route "/"
desc mock_user "A simple dictionary representing the allowed user {'username': 'test', 'password': 'pw'}"

# --- Aura Implementation ---

def --create_app() -> Flask:
    """Creates and configures the Flask application instance."""
    --app = Initialize Flask(__name__)
    Configure --app.secret_key using @secret_key 
    Return the configured --app

def --login_handler():
    """Handles POST requests to @login_route. Checks mock credentials."""
    if request.method == 'POST': # Ensure string comparison for POST
        --username = Get 'username' from form data
        --password = Get 'password' from form data
        # Use the actual mock_user dictionary from description context
        if --username == @mock_user['username'] and --password == @mock_user['password']:
            Set session['logged_in'] to True
            Redirect to @protected_route
        else:
            Return "Invalid Credentials", status 401
    else: # Handle GET request separately
       Render the login form

def --render_login_form():
    """Returns the HTML for the login form."""
    Return HTML form for username/password POSTing to @login_route

def --logout_handler():
    """Handles requests to @logout_route. Clears session."""
    Clear session['logged_in']
    Redirect to @home_route

def --protected_handler():
    """Handles requests to @protected_route. Requires login."""
    if session['logged_in'] is True:
        Return "Welcome to the protected area!"
    else:
        Redirect to @login_route

def --home_handler():
    """Handles requests to @home_route."""
    Return "Home Page - <a href='/login'>Login</a>"

# --- Python Main Execution ---
if __name__ == '__main__':
    # Create the app instance HERE
    --app = create_app()

    # Define routes HERE using the created app instance
    # Note: These inner function names (home, login etc.) might need to be unique
    # if the compiler struggles with redefining them based on the outer Aura functions.
    @app.route(@home_route)
    def home_route_func(): # Changed name to avoid potential clash
        return home_handler()

    @app.route(@login_route, methods=['GET', 'POST'])
    def login_route_func(): # Changed name
        if request.method == 'POST':
            return login_handler() 
        else:
            return render_login_form() 

    @app.route(@logout_route)
    def logout_route_func(): # Changed name
        return logout_handler()

    @app.route(@protected_route)
    def protected_route_func(): # Changed name
        return protected_handler()

    # Run the app
    # Use host='0.0.0.0' to be accessible externally if needed
    # Reference the global --app variable - NO, reference the local --app
    Run the --app in debug mode on port 5000