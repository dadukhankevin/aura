#!/bin/bash

# Resolve the real path of the script, following symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# If you place this script in a subdirectory (e.g., bin/), adjust PROJECT_ROOT:
# if [[ "$(basename \"$SCRIPT_DIR\")" == "bin" ]]; then
#   PROJECT_ROOT=$(dirname "$SCRIPT_DIR")
# fi

VENV_PYTHON="$PROJECT_ROOT/.venv/bin/python"
COMPILER_SCRIPT="$PROJECT_ROOT/compiler/compiler.py"

# --- Checks ---
if [ ! -f "$VENV_PYTHON" ]; then
    echo "Error: Virtual environment Python not found at: $VENV_PYTHON" >&2
    echo "Please ensure the virtual environment '.venv' exists in the project root: $PROJECT_ROOT" >&2
    exit 1
fi

if [ ! -f "$COMPILER_SCRIPT" ]; then
    echo "Error: Compiler script not found at: $COMPILER_SCRIPT" >&2
    exit 1
fi

# --- Execution ---
# Use exec to replace the wrapper script process with the Python process.
# "$@" passes all command-line arguments received by the wrapper to the Python script.
echo "Running Aura Compiler ($COMPILER_SCRIPT) with $VENV_PYTHON ..." >&2
exec "$VENV_PYTHON" "$COMPILER_SCRIPT" "$@" 